name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: 'false'

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    name: Pre-deployment Security & Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
        
    - name: Install Composer dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --no-dev --optimize-autoloader
        fi
        
    - name: WordPress Security Scan
      run: |
        # Check for common security issues
        echo "🔍 Running security checks..."
        
        # Check for exposed sensitive files
        if find . -name "wp-config.php" -not -path "./config/*" | grep -q .; then
          echo "❌ wp-config.php found in repository root"
          exit 1
        fi
        
        # Check for database files
        if find . -name "*.sql" | grep -q .; then
          echo "❌ SQL files found in repository"
          exit 1
        fi
        
        # Check for log files
        if find . -name "*.log" | grep -q .; then
          echo "❌ Log files found in repository"
          exit 1
        fi
        
        echo "✅ Security checks passed"
        
    - name: Theme and Plugin Validation
      run: |
        echo "🎨 Validating custom theme..."
        if [ -d "wp-content/themes/mdts-theme" ]; then
          echo "✅ MDTS theme found"
        else
          echo "❌ MDTS theme missing"
          exit 1
        fi
        
        echo "🔌 Validating custom plugins..."
        if [ -d "wp-content/plugins/mdts-stripe-integration" ]; then
          echo "✅ MDTS Stripe plugin found"
        else
          echo "❌ MDTS Stripe plugin missing"
          exit 1
        fi
        
    - name: File Permission Check
      run: |
        echo "🔒 Checking file permissions..."
        # Ensure no executable permissions on PHP files
        find . -name "*.php" -perm /111 -exec echo "❌ Executable PHP file found: {}" \; -exec exit 1 \;
        echo "✅ File permissions OK"

  backup-production:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    name: Backup Production Environment
    
    steps:
    - name: Create Production Backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SITEGROUND_HOST }}
        username: ${{ secrets.SITEGROUND_USERNAME }}
        key: ${{ secrets.SITEGROUND_SSH_KEY }}
        script: |
          echo "📦 Creating production backup..."
          
          # Create backup directory with timestamp
          BACKUP_DIR="/home/${{ secrets.SITEGROUND_USERNAME }}/backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p $BACKUP_DIR
          
          # Backup database
          echo "💾 Backing up database..."
          mysqldump -h localhost -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} > $BACKUP_DIR/database.sql
          
          # Backup WordPress files (excluding uploads)
          echo "📁 Backing up WordPress files..."
          cd /home/${{ secrets.SITEGROUND_USERNAME }}/public_html
          tar -czf $BACKUP_DIR/wordpress-files.tar.gz \
            --exclude='wp-content/uploads' \
            --exclude='wp-content/cache' \
            --exclude='wp-content/backup*' \
            .
          
          # Create backup manifest
          echo "📋 Creating backup manifest..."
          echo "Backup created: $(date)" > $BACKUP_DIR/manifest.txt
          echo "Database: database.sql" >> $BACKUP_DIR/manifest.txt
          echo "Files: wordpress-files.tar.gz" >> $BACKUP_DIR/manifest.txt
          echo "Git commit: ${{ github.sha }}" >> $BACKUP_DIR/manifest.txt
          
          # Keep only last 5 backups
          cd /home/${{ secrets.SITEGROUND_USERNAME }}/backups
          ls -t | tail -n +6 | xargs -r rm -rf
          
          echo "✅ Backup completed: $BACKUP_DIR"

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, backup-production]
    name: Deploy to Production Server
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Install dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --no-dev --optimize-autoloader
        fi
        
    - name: Build theme assets
      run: |
        if [ -d "wp-content/themes/mdts-theme" ]; then
          cd wp-content/themes/mdts-theme
          if [ -f package.json ]; then
            npm ci
            npm run build
          fi
        fi
        
    - name: Prepare deployment files
      run: |
        echo "📦 Preparing deployment package..."
        
        # Create deployment directory
        mkdir -p deploy
        
        # Copy WordPress content (excluding sensitive files)
        rsync -av --exclude-from='.gitignore' \
          --exclude='.git' \
          --exclude='deploy' \
          --exclude='node_modules' \
          --exclude='*.log' \
          . deploy/
        
        # Create production wp-config.php
        cp config/wp-config-production.php deploy/wp-config.php
        
        # Create production .htaccess
        cp config/.htaccess-production deploy/.htaccess
        
        echo "✅ Deployment package ready"
        
    - name: Deploy via SFTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SITEGROUND_HOST }}
        username: ${{ secrets.SITEGROUND_USERNAME }}
        password: ${{ secrets.SITEGROUND_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /public_html/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/*.log
          **/wp-content/uploads/**
          **/wp-content/cache/**
        
    - name: Post-deployment optimization
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SITEGROUND_HOST }}
        username: ${{ secrets.SITEGROUND_USERNAME }}
        key: ${{ secrets.SITEGROUND_SSH_KEY }}
        script: |
          echo "🔧 Running post-deployment optimization..."
          
          cd /home/${{ secrets.SITEGROUND_USERNAME }}/public_html
          
          # Set proper file permissions
          find . -type d -exec chmod 755 {} \;
          find . -type f -exec chmod 644 {} \;
          chmod 600 wp-config.php
          
          # Clear WordPress cache
          if [ -f wp-content/advanced-cache.php ]; then
            rm -f wp-content/cache/*
          fi
          
          # Update WordPress database if needed
          wp core update-db --allow-root --path=/home/${{ secrets.SITEGROUND_USERNAME }}/public_html
          
          # Flush rewrite rules
          wp rewrite flush --allow-root --path=/home/${{ secrets.SITEGROUND_USERNAME }}/public_html
          
          # Clear object cache
          wp cache flush --allow-root --path=/home/${{ secrets.SITEGROUND_USERNAME }}/public_html
          
          echo "✅ Post-deployment optimization completed"

  verify-deployment:
    runs-on: ubuntu-latest
    needs: deploy-to-production
    name: Verify Production Deployment
    
    steps:
    - name: Health Check
      run: |
        echo "🏥 Running production health checks..."
        
        # Check homepage
        HOMEPAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://midastechnical.com/)
        if [ "$HOMEPAGE_STATUS" != "200" ]; then
          echo "❌ Homepage check failed (HTTP $HOMEPAGE_STATUS)"
          exit 1
        fi
        echo "✅ Homepage accessible"
        
        # Check shop page
        SHOP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://midastechnical.com/shop/)
        if [ "$SHOP_STATUS" != "200" ]; then
          echo "❌ Shop page check failed (HTTP $SHOP_STATUS)"
          exit 1
        fi
        echo "✅ Shop page accessible"
        
        # Check WordPress admin
        ADMIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://midastechnical.com/wp-admin/)
        if [ "$ADMIN_STATUS" != "200" ] && [ "$ADMIN_STATUS" != "302" ]; then
          echo "❌ Admin check failed (HTTP $ADMIN_STATUS)"
          exit 1
        fi
        echo "✅ WordPress admin accessible"
        
        # Check SSL certificate
        SSL_CHECK=$(echo | openssl s_client -servername midastechnical.com -connect midastechnical.com:443 2>/dev/null | grep -c "Verify return code: 0")
        if [ "$SSL_CHECK" != "1" ]; then
          echo "❌ SSL certificate check failed"
          exit 1
        fi
        echo "✅ SSL certificate valid"
        
        echo "🎉 All health checks passed!"

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-to-production, verify-deployment]
    if: always()
    name: Notify Deployment Status
    
    steps:
    - name: Deployment Success Notification
      if: needs.verify-deployment.result == 'success'
      run: |
        echo "🎉 Production deployment successful!"
        echo "✅ midastechnical.com updated to commit ${{ github.sha }}"
        echo "🔗 Live site: https://midastechnical.com"
        
    - name: Deployment Failure Notification
      if: needs.verify-deployment.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        echo "🔄 Automatic rollback may be required"
        echo "📞 Contact technical team immediately"
        exit 1
