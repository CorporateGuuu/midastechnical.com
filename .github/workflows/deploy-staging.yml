name: Deploy to Staging

on:
  push:
    branches: [ staging, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-to-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging Environment
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
        
    - name: Install Composer dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --optimize-autoloader
        fi
        
    - name: Build theme assets
      run: |
        if [ -d "wp-content/themes/mdts-theme" ]; then
          cd wp-content/themes/mdts-theme
          if [ -f package.json ]; then
            npm ci
            npm run build
          fi
        fi
        
    - name: Run WordPress tests
      run: |
        echo "üß™ Running WordPress compatibility tests..."
        
        # Check PHP syntax
        find . -name "*.php" -exec php -l {} \; | grep -v "No syntax errors"
        
        # Check for WordPress coding standards (basic)
        if command -v phpcs &> /dev/null; then
          phpcs --standard=WordPress wp-content/themes/mdts-theme/ || true
          phpcs --standard=WordPress wp-content/plugins/mdts-stripe-integration/ || true
        fi
        
        echo "‚úÖ Tests completed"
        
    - name: Prepare staging deployment
      run: |
        echo "üì¶ Preparing staging deployment..."
        
        # Create deployment directory
        mkdir -p deploy
        
        # Copy files (excluding sensitive data)
        rsync -av --exclude-from='.gitignore' \
          --exclude='.git' \
          --exclude='deploy' \
          --exclude='node_modules' \
          --exclude='*.log' \
          . deploy/
        
        # Create staging wp-config.php
        cp config/wp-config-staging.php deploy/wp-config.php
        
        # Create staging .htaccess
        cp config/.htaccess-staging deploy/.htaccess
        
        echo "‚úÖ Staging package ready"
        
    - name: Deploy to staging via SFTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SITEGROUND_STAGING_HOST }}
        username: ${{ secrets.SITEGROUND_STAGING_USERNAME }}
        password: ${{ secrets.SITEGROUND_STAGING_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /public_html/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/*.log
          **/wp-content/uploads/**
          **/wp-content/cache/**
          
    - name: Post-deployment staging optimization
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SITEGROUND_STAGING_HOST }}
        username: ${{ secrets.SITEGROUND_STAGING_USERNAME }}
        key: ${{ secrets.SITEGROUND_STAGING_SSH_KEY }}
        script: |
          echo "üîß Optimizing staging environment..."
          
          cd /home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/public_html
          
          # Set file permissions
          find . -type d -exec chmod 755 {} \;
          find . -type f -exec chmod 644 {} \;
          chmod 600 wp-config.php
          
          # Clear cache
          if [ -f wp-content/advanced-cache.php ]; then
            rm -rf wp-content/cache/*
          fi
          
          # Update database
          wp core update-db --allow-root --path=/home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/public_html
          
          # Flush rewrite rules
          wp rewrite flush --allow-root --path=/home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/public_html
          
          echo "‚úÖ Staging optimization completed"
          
    - name: Verify staging deployment
      run: |
        echo "üîç Verifying staging deployment..."
        
        STAGING_URL="${{ secrets.STAGING_URL }}"
        
        # Check staging homepage
        STAGING_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/")
        if [ "$STAGING_STATUS" != "200" ]; then
          echo "‚ùå Staging homepage check failed (HTTP $STAGING_STATUS)"
          exit 1
        fi
        echo "‚úÖ Staging homepage accessible"
        
        # Check staging shop
        SHOP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/shop/")
        if [ "$SHOP_STATUS" != "200" ]; then
          echo "‚ùå Staging shop check failed (HTTP $SHOP_STATUS)"
          exit 1
        fi
        echo "‚úÖ Staging shop accessible"
        
        echo "üéâ Staging deployment verified!"
        echo "üîó Staging URL: $STAGING_URL"
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Staging Deployment Complete**
            
            Your changes have been deployed to the staging environment:
            
            üîó **Staging URL**: ${{ secrets.STAGING_URL }}
            
            **Deployed Changes:**
            - Commit: ${context.sha.substring(0, 7)}
            - Branch: ${context.ref.replace('refs/heads/', '')}
            
            **Test the following:**
            - [ ] Homepage loads correctly
            - [ ] Shop functionality works
            - [ ] Product pages display properly
            - [ ] Checkout process functional
            - [ ] Admin dashboard accessible
            
            Once testing is complete, this PR can be merged to deploy to production.`
          })

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        echo "üîí Running security scan..."
        
        # Check for hardcoded secrets
        if grep -r -i "password\|secret\|key" --include="*.php" . | grep -v "wp-config-sample\|README"; then
          echo "‚ö†Ô∏è  Potential hardcoded secrets found"
        fi
        
        # Check for SQL injection patterns
        if grep -r -i "\$_GET\|\$_POST" --include="*.php" . | grep -v "sanitize\|escape"; then
          echo "‚ö†Ô∏è  Potential SQL injection vulnerabilities found"
        fi
        
        # Check for XSS vulnerabilities
        if grep -r "echo \$_" --include="*.php" .; then
          echo "‚ö†Ô∏è  Potential XSS vulnerabilities found"
        fi
        
        echo "‚úÖ Security scan completed"

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    name: Performance Testing
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.STAGING_URL }}
          ${{ secrets.STAGING_URL }}/shop/
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Performance report
      run: |
        echo "üìä Performance testing completed"
        echo "üîó Detailed results available in Lighthouse CI artifacts"
