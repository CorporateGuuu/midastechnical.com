name: WordPress Updates Management

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'security'
        type: choice
        options:
        - security
        - plugins
        - themes
        - core
        - all

jobs:
  check-updates:
    runs-on: ubuntu-latest
    name: Check for WordPress Updates
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_list: ${{ steps.check.outputs.update_list }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for available updates
      id: check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SITEGROUND_STAGING_HOST }}
        username: ${{ secrets.SITEGROUND_STAGING_USERNAME }}
        key: ${{ secrets.SITEGROUND_STAGING_SSH_KEY }}
        script: |
          cd /home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/public_html
          
          echo "🔍 Checking for WordPress updates..."
          
          # Check core updates
          CORE_UPDATES=$(wp core check-update --format=count --allow-root 2>/dev/null || echo "0")
          
          # Check plugin updates
          PLUGIN_UPDATES=$(wp plugin list --update=available --format=count --allow-root 2>/dev/null || echo "0")
          
          # Check theme updates
          THEME_UPDATES=$(wp theme list --update=available --format=count --allow-root 2>/dev/null || echo "0")
          
          # Check for security updates
          SECURITY_UPDATES=$(wp plugin list --update=available --format=json --allow-root 2>/dev/null | jq -r '.[] | select(.update_version != null) | .name' | wc -l || echo "0")
          
          echo "Core updates available: $CORE_UPDATES"
          echo "Plugin updates available: $PLUGIN_UPDATES"
          echo "Theme updates available: $THEME_UPDATES"
          echo "Security updates available: $SECURITY_UPDATES"
          
          # Create update summary
          UPDATE_SUMMARY=""
          if [ "$CORE_UPDATES" -gt 0 ]; then
            UPDATE_SUMMARY="$UPDATE_SUMMARY\nWordPress Core: $CORE_UPDATES updates"
          fi
          if [ "$PLUGIN_UPDATES" -gt 0 ]; then
            UPDATE_SUMMARY="$UPDATE_SUMMARY\nPlugins: $PLUGIN_UPDATES updates"
          fi
          if [ "$THEME_UPDATES" -gt 0 ]; then
            UPDATE_SUMMARY="$UPDATE_SUMMARY\nThemes: $THEME_UPDATES updates"
          fi
          
          TOTAL_UPDATES=$((CORE_UPDATES + PLUGIN_UPDATES + THEME_UPDATES))
          
          if [ "$TOTAL_UPDATES" -gt 0 ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "update_list<<EOF" >> $GITHUB_OUTPUT
            echo -e "$UPDATE_SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ No updates available"
          fi

  backup-before-updates:
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'
    name: Create Backup Before Updates
    
    steps:
    - name: Create staging backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SITEGROUND_STAGING_HOST }}
        username: ${{ secrets.SITEGROUND_STAGING_USERNAME }}
        key: ${{ secrets.SITEGROUND_STAGING_SSH_KEY }}
        script: |
          echo "📦 Creating backup before WordPress updates..."
          
          BACKUP_DIR="/home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/backups/updates_$(date +%Y%m%d_%H%M%S)"
          mkdir -p $BACKUP_DIR
          
          cd /home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/public_html
          
          # Backup database
          echo "💾 Backing up database..."
          mysqldump -h localhost -u ${{ secrets.STAGING_DB_USERNAME }} -p${{ secrets.STAGING_DB_PASSWORD }} ${{ secrets.STAGING_DB_NAME }} > $BACKUP_DIR/database.sql
          
          # Backup WordPress files
          echo "📁 Backing up WordPress files..."
          tar -czf $BACKUP_DIR/wordpress-files.tar.gz \
            --exclude='wp-content/uploads' \
            --exclude='wp-content/cache' \
            .
          
          # Create manifest
          cat > $BACKUP_DIR/manifest.txt << EOF
          Backup created: $(date)
          Purpose: WordPress updates backup
          Database: database.sql
          Files: wordpress-files.tar.gz
          Updates available: ${{ needs.check-updates.outputs.update_list }}
          EOF
          
          echo "✅ Backup completed: $BACKUP_DIR"

  apply-updates:
    runs-on: ubuntu-latest
    needs: [check-updates, backup-before-updates]
    if: needs.check-updates.outputs.has_updates == 'true'
    name: Apply WordPress Updates
    environment: staging
    
    steps:
    - name: Apply updates to staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SITEGROUND_STAGING_HOST }}
        username: ${{ secrets.SITEGROUND_STAGING_USERNAME }}
        key: ${{ secrets.SITEGROUND_STAGING_SSH_KEY }}
        script: |
          cd /home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/public_html
          
          echo "🔄 Applying WordPress updates..."
          
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'security' }}"
          
          case $UPDATE_TYPE in
            "security"|"all")
              echo "🔒 Applying security updates..."
              wp plugin update --all --allow-root 2>/dev/null || true
              ;;
            "plugins"|"all")
              echo "🔌 Updating plugins..."
              wp plugin update --all --allow-root 2>/dev/null || true
              ;;
            "themes"|"all")
              echo "🎨 Updating themes..."
              wp theme update --all --allow-root 2>/dev/null || true
              ;;
            "core"|"all")
              echo "⚙️ Updating WordPress core..."
              wp core update --allow-root 2>/dev/null || true
              wp core update-db --allow-root 2>/dev/null || true
              ;;
          esac
          
          # Clear cache after updates
          echo "🧹 Clearing cache..."
          wp cache flush --allow-root 2>/dev/null || true
          
          echo "✅ Updates applied successfully"

  test-updates:
    runs-on: ubuntu-latest
    needs: apply-updates
    name: Test Updated Site
    
    steps:
    - name: Test staging site functionality
      run: |
        echo "🧪 Testing updated staging site..."
        
        STAGING_URL="${{ secrets.STAGING_URL }}"
        
        # Test homepage
        HOMEPAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/")
        if [ "$HOMEPAGE_STATUS" != "200" ]; then
          echo "❌ Homepage test failed (HTTP $HOMEPAGE_STATUS)"
          exit 1
        fi
        echo "✅ Homepage accessible"
        
        # Test shop page
        SHOP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/shop/")
        if [ "$SHOP_STATUS" != "200" ]; then
          echo "❌ Shop page test failed (HTTP $SHOP_STATUS)"
          exit 1
        fi
        echo "✅ Shop page accessible"
        
        # Test admin login page
        ADMIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/wp-admin/")
        if [ "$ADMIN_STATUS" != "200" ] && [ "$ADMIN_STATUS" != "302" ]; then
          echo "❌ Admin page test failed (HTTP $ADMIN_STATUS)"
          exit 1
        fi
        echo "✅ Admin page accessible"
        
        echo "🎉 All tests passed!"

  create-update-pr:
    runs-on: ubuntu-latest
    needs: [check-updates, test-updates]
    if: needs.check-updates.outputs.has_updates == 'true'
    name: Create Update Pull Request
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Export updated files from staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SITEGROUND_STAGING_HOST }}
        username: ${{ secrets.SITEGROUND_STAGING_USERNAME }}
        key: ${{ secrets.SITEGROUND_STAGING_SSH_KEY }}
        script: |
          cd /home/${{ secrets.SITEGROUND_STAGING_USERNAME }}/public_html
          
          echo "📦 Exporting updated WordPress files..."
          
          # Create export directory
          EXPORT_DIR="/tmp/wp_export_$(date +%Y%m%d_%H%M%S)"
          mkdir -p $EXPORT_DIR
          
          # Export only themes and plugins (not core files)
          cp -r wp-content/themes $EXPORT_DIR/
          cp -r wp-content/plugins $EXPORT_DIR/
          
          # Create update summary
          wp plugin list --format=json --allow-root > $EXPORT_DIR/plugins.json
          wp theme list --format=json --allow-root > $EXPORT_DIR/themes.json
          
          echo "✅ Files exported to $EXPORT_DIR"
          
    - name: Create update branch and PR
      run: |
        # Configure git
        git config --global user.name "WordPress Updates Bot"
        git config --global user.email "updates@midastechnical.com"
        
        # Create update branch
        BRANCH_NAME="wordpress-updates-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        
        # Add update information
        echo "# WordPress Updates - $(date)" > WORDPRESS_UPDATES.md
        echo "" >> WORDPRESS_UPDATES.md
        echo "## Updates Applied" >> WORDPRESS_UPDATES.md
        echo "${{ needs.check-updates.outputs.update_list }}" >> WORDPRESS_UPDATES.md
        echo "" >> WORDPRESS_UPDATES.md
        echo "## Testing Status" >> WORDPRESS_UPDATES.md
        echo "✅ Staging tests passed" >> WORDPRESS_UPDATES.md
        echo "✅ Site functionality verified" >> WORDPRESS_UPDATES.md
        echo "" >> WORDPRESS_UPDATES.md
        echo "## Next Steps" >> WORDPRESS_UPDATES.md
        echo "1. Review changes in this PR" >> WORDPRESS_UPDATES.md
        echo "2. Test additional functionality if needed" >> WORDPRESS_UPDATES.md
        echo "3. Merge to deploy to production" >> WORDPRESS_UPDATES.md
        
        # Commit changes
        git add .
        git commit -m "WordPress updates - $(date +%Y-%m-%d)

        Updates applied:
        ${{ needs.check-updates.outputs.update_list }}
        
        - Staging tests passed
        - Site functionality verified
        - Ready for production deployment"
        
        # Push branch
        git push origin $BRANCH_NAME
        
        # Create pull request
        gh pr create \
          --title "WordPress Updates - $(date +%Y-%m-%d)" \
          --body "## WordPress Updates Applied

        ${{ needs.check-updates.outputs.update_list }}

        ## Testing Results
        ✅ Staging environment tested successfully
        ✅ Homepage functionality verified
        ✅ Shop functionality verified  
        ✅ Admin dashboard accessible

        ## Deployment
        Merging this PR will automatically deploy updates to production.

        ## Rollback
        If issues occur, use the rollback script: \`./scripts/rollback.sh\`" \
          --base main \
          --head $BRANCH_NAME

  notify-updates:
    runs-on: ubuntu-latest
    needs: [check-updates, create-update-pr]
    if: always()
    name: Notify Update Status
    
    steps:
    - name: Send update notification
      run: |
        if [ "${{ needs.check-updates.outputs.has_updates }}" = "true" ]; then
          echo "📧 WordPress updates available and PR created"
          echo "Updates: ${{ needs.check-updates.outputs.update_list }}"
        else
          echo "✅ No WordPress updates available"
        fi
