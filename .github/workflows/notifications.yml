name: Deployment Notifications

on:
  workflow_run:
    workflows: ["Deploy to Production", "Deploy to Staging"]
    types:
      - completed

jobs:
  notify-deployment-status:
    runs-on: ubuntu-latest
    name: Send Deployment Notifications
    
    steps:
    - name: Get workflow information
      id: workflow-info
      run: |
        echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
        echo "workflow_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
        echo "workflow_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT
        echo "commit_sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
        echo "branch_name=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_OUTPUT
        
        # Determine environment
        if [[ "${{ github.event.workflow_run.name }}" == *"Production"* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "site_url=https://midastechnical.com" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "site_url=${{ secrets.STAGING_URL }}" >> $GITHUB_OUTPUT
        fi

    - name: Create notification message
      id: message
      run: |
        WORKFLOW_NAME="${{ steps.workflow-info.outputs.workflow_name }}"
        WORKFLOW_STATUS="${{ steps.workflow-info.outputs.workflow_status }}"
        ENVIRONMENT="${{ steps.workflow-info.outputs.environment }}"
        SITE_URL="${{ steps.workflow-info.outputs.site_url }}"
        COMMIT_SHA="${{ steps.workflow-info.outputs.commit_sha }}"
        BRANCH_NAME="${{ steps.workflow-info.outputs.branch_name }}"
        WORKFLOW_URL="${{ steps.workflow-info.outputs.workflow_url }}"
        
        # Create status emoji and color
        if [ "$WORKFLOW_STATUS" = "success" ]; then
          STATUS_EMOJI="‚úÖ"
          STATUS_COLOR="good"
          STATUS_TEXT="SUCCESS"
        elif [ "$WORKFLOW_STATUS" = "failure" ]; then
          STATUS_EMOJI="‚ùå"
          STATUS_COLOR="danger"
          STATUS_TEXT="FAILED"
        else
          STATUS_EMOJI="‚ö†Ô∏è"
          STATUS_COLOR="warning"
          STATUS_TEXT="CANCELLED"
        fi
        
        # Create message content
        MESSAGE_TITLE="$STATUS_EMOJI WordPress Deployment $STATUS_TEXT"
        
        MESSAGE_BODY="**Environment**: $ENVIRONMENT
        **Site**: $SITE_URL
        **Branch**: $BRANCH_NAME
        **Commit**: \`${COMMIT_SHA:0:7}\`
        **Workflow**: [$WORKFLOW_NAME]($WORKFLOW_URL)
        **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Add environment-specific information
        if [ "$ENVIRONMENT" = "production" ]; then
          MESSAGE_BODY="$MESSAGE_BODY
          
          **üöÄ Production Deployment**
          - Live site updated
          - Customer-facing changes active
          - Monitor for any issues"
        else
          MESSAGE_BODY="$MESSAGE_BODY
          
          **üß™ Staging Deployment**
          - Testing environment updated
          - Ready for QA testing
          - Merge to main for production"
        fi
        
        # Add failure-specific information
        if [ "$WORKFLOW_STATUS" = "failure" ]; then
          MESSAGE_BODY="$MESSAGE_BODY
          
          **üîß Action Required**
          - Check workflow logs for errors
          - Fix issues and retry deployment
          - Consider rollback if production affected"
        fi
        
        # Save outputs
        echo "title=$MESSAGE_TITLE" >> $GITHUB_OUTPUT
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$MESSAGE_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "color=$STATUS_COLOR" >> $GITHUB_OUTPUT

    - name: Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_HOST || 'mail.midastechnical.com' }}
        server_port: ${{ secrets.SMTP_PORT || '587' }}
        username: ${{ secrets.SMTP_USER }}
        password: ${{ secrets.SMTP_PASS }}
        subject: "${{ steps.message.outputs.title }} - midastechnical.com"
        to: ${{ secrets.NOTIFICATION_EMAIL || 'admin@midastechnical.com' }}
        from: "WordPress Deployment <noreply@midastechnical.com>"
        html_body: |
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>WordPress Deployment Notification</title>
              <style>
                  body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                  .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                  .header { background: #0073aa; color: white; padding: 20px; text-align: center; }
                  .content { padding: 20px; background: #f9f9f9; }
                  .status-success { border-left: 4px solid #28a745; padding-left: 15px; }
                  .status-failure { border-left: 4px solid #dc3545; padding-left: 15px; }
                  .status-warning { border-left: 4px solid #ffc107; padding-left: 15px; }
                  .footer { text-align: center; padding: 20px; font-size: 12px; color: #666; }
                  .button { display: inline-block; padding: 10px 20px; background: #0073aa; color: white; text-decoration: none; border-radius: 4px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>WordPress Deployment Notification</h1>
                      <h2>midastechnical.com</h2>
                  </div>
                  <div class="content">
                      <div class="status-${{ steps.workflow-info.outputs.workflow_status }}">
                          <h3>${{ steps.message.outputs.title }}</h3>
                          <p><strong>Environment:</strong> ${{ steps.workflow-info.outputs.environment }}</p>
                          <p><strong>Site:</strong> <a href="${{ steps.workflow-info.outputs.site_url }}">${{ steps.workflow-info.outputs.site_url }}</a></p>
                          <p><strong>Branch:</strong> ${{ steps.workflow-info.outputs.branch_name }}</p>
                          <p><strong>Commit:</strong> ${{ steps.workflow-info.outputs.commit_sha }}</p>
                          <p><strong>Time:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
                      </div>
                      
                      <p><a href="${{ steps.workflow-info.outputs.workflow_url }}" class="button">View Workflow Details</a></p>
                      
                      ${{ steps.workflow-info.outputs.workflow_status == 'failure' && '<p><strong>‚ö†Ô∏è Action Required:</strong> This deployment failed. Please check the workflow logs and take appropriate action.</p>' || '' }}
                  </div>
                  <div class="footer">
                      <p>This is an automated notification from the WordPress deployment system.</p>
                      <p>MDTS - Midas Technical Solutions</p>
                  </div>
              </div>
          </body>
          </html>

    - name: Send Slack notification
      if: always() && secrets.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.workflow-info.outputs.workflow_status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        channel: '#deployments'
        username: 'WordPress Deploy Bot'
        icon_emoji: ':wordpress:'
        fields: |
          {
            "Environment": "${{ steps.workflow-info.outputs.environment }}",
            "Site": "${{ steps.workflow-info.outputs.site_url }}",
            "Branch": "${{ steps.workflow-info.outputs.branch_name }}",
            "Commit": "${{ steps.workflow-info.outputs.commit_sha }}",
            "Workflow": "${{ steps.workflow-info.outputs.workflow_url }}"
          }
        text: |
          ${{ steps.message.outputs.title }}
          
          ${{ steps.message.outputs.body }}

    - name: Create GitHub issue on failure
      if: steps.workflow-info.outputs.workflow_status == 'failure' && steps.workflow-info.outputs.environment == 'production'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® Production Deployment Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Production Deployment Failure
          
          **Environment**: Production
          **Site**: https://midastechnical.com
          **Branch**: ${{ steps.workflow-info.outputs.branch_name }}
          **Commit**: ${{ steps.workflow-info.outputs.commit_sha }}
          **Workflow**: ${{ steps.workflow-info.outputs.workflow_url }}
          **Time**: ${new Date().toISOString()}
          
          ## Immediate Actions Required
          
          1. **Check workflow logs** for specific error details
          2. **Verify site functionality** at https://midastechnical.com
          3. **Consider rollback** if site is affected
          4. **Fix underlying issues** before next deployment
          
          ## Rollback Procedure
          
          If the site is affected, use the emergency rollback:
          
          \`\`\`bash
          # SSH to production server
          ssh user@server
          
          # Run rollback script
          ./scripts/rollback.sh production
          \`\`\`
          
          ## Investigation Checklist
          
          - [ ] Reviewed workflow logs
          - [ ] Checked site functionality
          - [ ] Identified root cause
          - [ ] Applied fix
          - [ ] Tested fix in staging
          - [ ] Ready for retry
          
          ## Next Steps
          
          1. Investigate and fix the deployment issue
          2. Test the fix in staging environment
          3. Retry the production deployment
          4. Close this issue once resolved
          
          ---
          
          *This issue was automatically created by the deployment notification system.*`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['deployment-failure', 'production', 'urgent']
          });

    - name: Update deployment status badge
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const status = '${{ steps.workflow-info.outputs.workflow_status }}';
          const environment = '${{ steps.workflow-info.outputs.environment }}';
          
          let badgeColor, badgeMessage;
          
          if (status === 'success') {
            badgeColor = 'brightgreen';
            badgeMessage = 'deployed';
          } else if (status === 'failure') {
            badgeColor = 'red';
            badgeMessage = 'failed';
          } else {
            badgeColor = 'yellow';
            badgeMessage = 'unknown';
          }
          
          const badgeUrl = `https://img.shields.io/badge/${environment}-${badgeMessage}-${badgeColor}`;
          
          console.log(`Deployment status: ${environment} - ${badgeMessage}`);
          console.log(`Badge URL: ${badgeUrl}`);

  health-check-after-deployment:
    runs-on: ubuntu-latest
    needs: notify-deployment-status
    if: github.event.workflow_run.conclusion == 'success'
    name: Post-Deployment Health Check
    
    steps:
    - name: Wait for deployment to stabilize
      run: sleep 30
      
    - name: Comprehensive health check
      run: |
        ENVIRONMENT="${{ github.event.workflow_run.name == 'Deploy to Production' && 'production' || 'staging' }}"
        SITE_URL="${{ github.event.workflow_run.name == 'Deploy to Production' && 'https://midastechnical.com' || secrets.STAGING_URL }}"
        
        echo "üè• Running post-deployment health check for $ENVIRONMENT"
        echo "Site URL: $SITE_URL"
        
        # Test homepage
        echo "Testing homepage..."
        HOMEPAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL/")
        if [ "$HOMEPAGE_STATUS" != "200" ]; then
          echo "‚ùå Homepage health check failed (HTTP $HOMEPAGE_STATUS)"
          exit 1
        fi
        echo "‚úÖ Homepage healthy"
        
        # Test shop page
        echo "Testing shop page..."
        SHOP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL/shop/")
        if [ "$SHOP_STATUS" != "200" ]; then
          echo "‚ùå Shop page health check failed (HTTP $SHOP_STATUS)"
          exit 1
        fi
        echo "‚úÖ Shop page healthy"
        
        # Test admin login
        echo "Testing admin login..."
        ADMIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL/wp-admin/")
        if [ "$ADMIN_STATUS" != "200" ] && [ "$ADMIN_STATUS" != "302" ]; then
          echo "‚ùå Admin login health check failed (HTTP $ADMIN_STATUS)"
          exit 1
        fi
        echo "‚úÖ Admin login healthy"
        
        # Test SSL certificate
        echo "Testing SSL certificate..."
        SSL_CHECK=$(echo | openssl s_client -servername $(echo $SITE_URL | sed 's|https://||') -connect $(echo $SITE_URL | sed 's|https://||'):443 2>/dev/null | grep -c "Verify return code: 0" || echo "0")
        if [ "$SSL_CHECK" != "1" ]; then
          echo "‚ö†Ô∏è  SSL certificate check warning"
        else
          echo "‚úÖ SSL certificate healthy"
        fi
        
        echo "üéâ All health checks passed!"

    - name: Send health check notification
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `‚ö†Ô∏è Post-Deployment Health Check Failed`;
          const body = `## Health Check Failure
          
          The deployment completed successfully, but post-deployment health checks failed.
          
          **Environment**: ${{ github.event.workflow_run.name == 'Deploy to Production' && 'Production' || 'Staging' }}
          **Site**: ${{ github.event.workflow_run.name == 'Deploy to Production' && 'https://midastechnical.com' || secrets.STAGING_URL }}
          **Time**: ${new Date().toISOString()}
          
          ## Immediate Actions Required
          
          1. **Check site functionality** manually
          2. **Review deployment logs** for any warnings
          3. **Monitor site performance** closely
          4. **Consider rollback** if issues persist
          
          ---
          
          *This issue was automatically created by the health check system.*`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['health-check-failure', 'monitoring']
          });
